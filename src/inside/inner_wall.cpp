#include "inside/inner_wall.h"

InnerWall::InnerWall(){
    square_.getVertices() = {
        // --- 顶面 (Top Face) ---
        // 法向量: (0.0f, 0.0f, 1.0f)
        // 对应基础顶点: v4, v5, v6, v7
        // 0: v4 (-0.49, -0.49, 0.49)
        -0.49f, -0.49f, 0.49f,  0.0f, 0.0f, 1.0f,  1.0f, 1.0f, 1.0f,  0.0f, 0.0f,
        // 1: v5 (0.49, -0.49, 0.49)
        0.49f, -0.49f, 0.49f,   0.0f, 0.0f, 1.0f,  1.0f, 1.0f, 1.0f,  1.0f, 0.0f,
        // 2: v6 (-0.49, 0.49, 0.49)
        -0.49f, 0.49f, 0.49f,   0.0f, 0.0f, 1.0f,  1.0f, 1.0f, 1.0f,  0.0f, 1.0f,
        // 3: v7 (0.49, 0.49, 0.49)
        0.49f, 0.49f, 0.49f,    0.0f, 0.0f, 1.0f,  1.0f, 1.0f, 1.0f,  1.0f, 1.0f,

        // --- 前侧面 (Front Face, 面对Y轴正方向) ---
        // 法向量: (0.0f, 1.0f, 0.0f)
        // 对应基础顶点: v2, v3, v6, v7
        // 4: v2 (-0.49, 0.49, -0.49)
        -0.49f, 0.49f, -0.49f,  0.0f, 1.0f, 0.0f,  1.0f, 1.0f, 1.0f,  0.0f, 0.0f,
        // 5: v3 (0.49, 0.49, -0.49)
        0.49f, 0.49f, -0.49f,   0.0f, 1.0f, 0.0f,  1.0f, 1.0f, 1.0f,  1.0f, 0.0f,
        // 6: v6 (-0.49, 0.49, 0.49)
        -0.49f, 0.49f, 0.49f,   0.0f, 1.0f, 0.0f,  1.0f, 1.0f, 1.0f,  0.0f, 1.0f,
        // 7: v7 (0.49, 0.49, 0.49)
        0.49f, 0.49f, 0.49f,    0.0f, 1.0f, 0.0f,  1.0f, 1.0f, 1.0f,  1.0f, 1.0f,

        // --- 后侧面 (Back Face, 面对Y轴负方向) ---
        // 法向量: (0.0f, -1.0f, 0.0f)
        // 对应基础顶点: v0, v1, v4, v5
        // 8: v1 (0.49, -0.49, -0.49) (顺序需要调整以保证法线朝外和缠绕顺序)
        0.49f, -0.49f, -0.49f,  0.0f, -1.0f, 0.0f, 1.0f, 1.0f, 1.0f,  0.0f, 0.0f,
        // 9: v0 (-0.49, -0.49, -0.49)
        -0.49f, -0.49f, -0.49f, 0.0f, -1.0f, 0.0f, 1.0f, 1.0f, 1.0f,  1.0f, 0.0f,
        // 10: v5 (0.49, -0.49, 0.49)
        0.49f, -0.49f, 0.49f,   0.0f, -1.0f, 0.0f, 1.0f, 1.0f, 1.0f,  0.0f, 1.0f,
        // 11: v4 (-0.49, -0.49, 0.49)
        -0.49f, -0.49f, 0.49f,  0.0f, -1.0f, 0.0f, 1.0f, 1.0f, 1.0f,  1.0f, 1.0f,

        // --- 左侧面 (Left Face, 面对X轴负方向) ---
        // 法向量: (-1.0f, 0.0f, 0.0f)
        // 对应基础顶点: v0, v2, v4, v6
        // 12: v0 (-0.49, -0.49, -0.49)
        -0.49f, -0.49f, -0.49f, -1.0f, 0.0f, 0.0f,  1.0f, 1.0f, 1.0f,  0.0f, 0.0f,
        // 13: v4 (-0.49, -0.49, 0.49)
        -0.49f, -0.49f, 0.49f,  -1.0f, 0.0f, 0.0f,  1.0f, 1.0f, 1.0f,  1.0f, 0.0f,
        // 14: v2 (-0.49, 0.49, -0.49)
        -0.49f, 0.49f, -0.49f,  -1.0f, 0.0f, 0.0f,  1.0f, 1.0f, 1.0f,  0.0f, 1.0f,
        // 15: v6 (-0.49, 0.49, 0.49)
        -0.49f, 0.49f, 0.49f,   -1.0f, 0.0f, 0.0f,  1.0f, 1.0f, 1.0f,  1.0f, 1.0f,

        // --- 右侧面 (Right Face, 面对X轴正方向) ---
        // 法向量: (1.0f, 0.0f, 0.0f)
        // 对应基础顶点: v1, v3, v5, v7
        // 16: v1 (0.49, -0.49, -0.49)
        0.49f, -0.49f, -0.49f,  1.0f, 0.0f, 0.0f,  1.0f, 1.0f, 1.0f,  0.0f, 0.0f,
        // 17: v3 (0.49, 0.49, -0.49)
        0.49f, 0.49f, -0.49f,   1.0f, 0.0f, 0.0f,  1.0f, 1.0f, 1.0f,  1.0f, 0.0f,
        // 18: v5 (0.49, -0.49, 0.49)
        0.49f, -0.49f, 0.49f,   1.0f, 0.0f, 0.0f,  1.0f, 1.0f, 1.0f,  0.0f, 1.0f,
        // 19: v7 (0.49, 0.49, 0.49)
        0.49f, 0.49f, 0.49f,    1.0f, 0.0f, 0.0f,  1.0f, 1.0f, 1.0f,  1.0f, 1.0f
    };

    square_.getIndices() = {
        // --- 顶面 (Top Face) ---
        // 对应顶点索引: 0, 1, 2, 3 (从上面的 vertices 列表中的顺序)
        0, 1, 3, // 第一个三角形 (v4, v5, v7)
        0, 3, 2, // 第二个三角形 (v4, v7, v6)

        // --- 前侧面 (Front Face) ---
        // 对应顶点索引: 4, 5, 6, 7
        4, 5, 7, // 第一个三角形 (v2, v3, v7)
        4, 7, 6, // 第二个三角形 (v2, v7, v6)

        // --- 后侧面 (Back Face) ---
        // 对应顶点索引: 8, 9, 10, 11 (请注意这里的顶点顺序是为了法线朝外)
        8, 9, 11, // 第一个三角形 (v1, v0, v4)
        8, 11, 10, // 第二个三角形 (v1, v4, v5)

        // --- 左侧面 (Left Face) ---
        // 对应顶点索引: 12, 13, 14, 15
        12, 13, 15, // 第一个三角形 (v0, v4, v6)
        12, 15, 14, // 第二个三角形 (v0, v6, v2)

        // --- 右侧面 (Right Face) ---
        // 对应顶点索引: 16, 17, 18, 19
        16, 17, 19, // 第一个三角形 (v1, v3, v7)
        16, 19, 18  // 第二个三角形 (v1, v7, v5)
    };
}

void InnerWall::setup() {
    square_.setup();
}


void InnerWall::draw(Shader& shader, const glm::mat4& modelMatrix) const {
    shader.setVec3("material.ka", ka_);
    shader.setVec3("material.kd", kd_);
    shader.setVec3("material.ks", ks_);
    shader.setFloat("material.ns", ns_);
    square_.draw(shader, modelMatrix);
}