#version 330 core
layout (location = 0) in vec3 aPos;       // 顶点位置 (来自 VBO)
layout (location = 1) in vec3 aNormal;    // 顶点法线 (来自 VBO)
layout (location = 2) in vec2 aTexCoords; // 纹理坐标 (来自 VBO)

// 输出到片段着色器
out vec3 FragPos_worldspace; // 片段在世界空间中的位置
out vec3 Normal_worldspace;  // 法线在世界空间中的方向
out vec2 TexCoords_FS;       // 纹理坐标

// Uniform 变量
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main()
{
    // 计算裁剪空间中的顶点位置
    gl_Position = projection * view * model * vec4(aPos, 1.0);

    // 计算世界空间中的顶点位置 (用于光照计算)
    FragPos_worldspace = vec3(model * vec4(aPos, 1.0));

    // 计算世界空间中的法线方向
    // 如果 model 矩阵包含不等比缩放，需要使用逆转置矩阵来正确变换法线
    Normal_worldspace = mat3(transpose(inverse(model))) * aNormal;

    // 直接传递纹理坐标给片段着色器
    TexCoords_FS = aTexCoords;
}